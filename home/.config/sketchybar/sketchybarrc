# This is a demo config to showcase some of the most important commands.
# It is meant to be changed and configured, as it is intentionally kept sparse.
# For a (much) more advanced configuration example see my dotfiles:
# https://github.com/FelixKratz/dotfiles

# Function to convert a hex color to a transparent hex color
# Usage: hexToTransparentHex "#ffffff" 90
# This will return "0x1Affffff"
function hexToTransparentHex() {
  local hex=$1
  local alpha=$(printf "%x" $(($2 * 255 / 100)))

  echo "0x$alpha${hex:1}"
}

PLUGIN_DIR="$CONFIG_DIR/plugins"

##### Bar Appearance #####
# Configuring the general appearance of the bar.
# These are only some of the options available. For all options see:
# https://felixkratz.github.io/SketchyBar/config/bar
# If you are looking for other colors, see the color picker:
# https://felixkratz.github.io/SketchyBar/config/tricks#color-picker

bar=(
  position=top
  font_smoothing=on
  padding_left=8
  padding_right=12
  color=0x00ffffff
  height=25
  y_offset=-25
)
sketchybar --bar "${bar[@]}"
yabai -m config external_bar all:25:0

##### Changing Defaults #####
# We now change some default values, which are applied to all further items.
# For a full list of all available item properties see:
# https://felixkratz.github.io/SketchyBar/config/items

labelColor=$(hexToTransparentHex "#ffffff" 90)

default=(
  padding_left=6
  padding_right=6
  icon.font="Symbols Nerd Font Mono:Regular:13.0"
  label.font="Maple Mono:Regular:14.0"
  icon.color="$labelColor"
  label.color="$labelColor"
  icon.padding_left=4
  icon.padding_right=4
  label.padding_left=6
  label.padding_right=6
)
sketchybar --default "${default[@]}"

##### Adding Mission Control Space Indicators #####
# Let's add some mission control spaces:
# https://felixkratz.github.io/SketchyBar/config/components#space----associate-mission-control-spaces-with-an-item
# to indicate active and available mission control spaces.

SPACE_ICONS=("Finder" "Terminal" "Code" "Browser" "Design" "Music" "Chat" "Mail" "Passwords" "Misc")
for i in "${!SPACE_ICONS[@]}"; do
  sid="$(($i + 1))"
  space=(
    space="$sid"
    padding_left=2
    padding_right=2
    label="${SPACE_ICONS[i]}"
    label.padding_left=8
    label.padding_right=8
    background.color=0xff313244
    background.corner_radius=6
    background.height=20
    icon.drawing=off
    script="$PLUGIN_DIR/space.sh"
    click_script="$PLUGIN_DIR/space_click.sh $sid"
  )
  sketchybar --add space space."$sid" left --set space."$sid" "${space[@]}"
done

##### Adding Left Items #####
# We add some regular items to the left side of the bar, where
# only the properties deviating from the current defaults need to be set

sketchybar --add item chevron center \
  --set chevron icon= label.drawing=off \
  --add item front_app center \
  --set front_app icon.drawing=off script="$PLUGIN_DIR/front_app.sh" \
  --subscribe front_app front_app_switched

##### Adding Right Items #####
# In the same way as the left items we can add items to the right side.
# Additional position (e.g. center) are available, see:
# https://felixkratz.github.io/SketchyBar/config/items#adding-items-to-sketchybar

# Some items refresh on a fixed cycle, e.g. the clock runs its script once
# every 10s. Other items respond to events they subscribe to, e.g. the
# volume.sh script is only executed once an actual change in system audio
# volume is registered. More info about the event system can be found here:
# https://felixkratz.github.io/SketchyBar/config/events

sketchybar --add item clock right \
  --set clock update_freq=1 icon= script="$PLUGIN_DIR/clock.sh" \
  --add item volume right \
  --set volume script="$PLUGIN_DIR/volume.sh" \
  --subscribe volume volume_change \
  --add item battery right \
  --set battery update_freq=120 script="$PLUGIN_DIR/battery.sh" \
  --subscribe battery system_woke power_source_change

##### Force all scripts to run the first time (never do this in a script) #####
sketchybar --update
sketchybar --hotload true
sleep 0.2
sketchybar --animate circ 20 --bar y_offset=0
